//기능구현
2. 서버 배포 ////////////
5. 크롤링으로 최신 논문, examine 토픽 등 가져오기 ////////////
8. 유명인들 보충제 목록 정리 및 크롤링으로 업데이트(심랜드, 브존, 커즈와일 등) ////
9. 본인 영양제 스택 정리 기능 및 구매 간접 장바구니 기능
11.기대효과, 부작용 상세페이지 추가
12.추천 제품 리스트 및 가격, 컨슈머랩 fda 결과 등 나열
13.회사별 종합 신뢰도 평가(fda 검사, 기타 중금속, 함량 등)
15.즐겨찾기, 메모, 공유 //////////// 로컬스토리지
17.업데이트 내역 //////////////
18.로그인 시 문서작성 가능 및 작성내역 저장
21.성분별 인기도 분석(연령대, 나라, 성별 분류)
30.데이터 로딩 개수 제한 두기 ex)30개 로딩하고 추가 로딩 버튼
31.테이블 태그 클릭하면 필터링
38.보안(함수 복호화, ip 차단 등)
41.semanticscholar은 api 제한이 있으므로 대책 강구->임시로 api 막힐시 웹 크롤링 추가시도
42.조회수에 따른 대규모 동시성 고려, 아키텍처 및 cs 응용, 조회수를 정렬에도 추가
43.사이트 전체 조회수도 고려
45.그 외 백엔드 성능 고려(ex)정렬, 필터링의 알고리즘과 아키텍처)
55.크롤링으로 자동 가격 비교 및 시간대별 가격 추이 분석
58.기존 초기화 버튼을 row 정보 불러오는 걸로 바꾸고 항목 전체 해제 버튼 새로 만들기
65.참가자 만명 이상일시 --만명으로 생략표시
68.상세페이지에 모달 두개 삽입
73.td 그냥 하드코딩
75.ai 적극 활용(크롤링 대안/fast api)
77.aws 1년 프리티어로 서버 배포
78.조회수 redis로 관리, 검색어 자동 추천도
79.크롤링 혹은 llm 분석시 사용자 확인 거치기(선택)
84.회원 가입 시 이메일 인증-> 후순위
86.사용자 설정도 user table에 저장
87.초록 툴팁 중략하거나 요약하거나 딴걸로 바꾸기
90.나무위키 처럼 문서 역사
91.llm으로 성분-효과 매핑까지 추가(이름 정확히 매핑하는게 관건, 태그에 없으면 자동추가까지)
92.이용자간 채팅기능 추가, nw처럼 토론 등 추가, 게시판 추가
93.회원가입하면 자동 로그인? 또 리다이렉트가 회원가입 페이지로 안가게 조절
94.알림은 성분 추가, 핫딜 등
95.추천수 구현(유저만 가능)
96.북마크 줄 나누는 매서드 구현
97.페이지 이름 db 동기화
98.수정시각 db 기본설정 말구 커스텀으로 바꾸기
99.필터링 검색 기능 구현(ex 상세페이지 조회수 몇 이상, 신뢰점수 몇 이상)
100.통합 검색 매서드 구현
101.구독비 결제기능 구현
102.스크롤 버튼 스크롤에 따라 시각효과(원 채워짐 VS 사각형 채워짐

//
// 이해

1.삼항연산자 안에서  a = void x b ? void y c : d가 면 void가 아무 영향없이 실행되고 a에 값도 정상적으로 반한되나?
2.최적화, 보안 기법
3.리눅스 , 계정 생성, 권한 관리, 프로젝트, 서버 관리
4.rest api, json api,

// 암기
프엔 -> 백엔으로 dto 보낼때 필요한 id 등만 보내도 생략된 것들 null값으로 들어감
템플릿 리터럴 사용여부 규칙성 확인

//js

1. 변수 복사시 기본으로 참조복사하기에 const a = [...b]; 이런식의 전개연산자필요
2. 엔티티 수정할 시 db 테이블의 값은 어떤 알고리즘으로 수정하는가?
3. 로컬스토리지는 js 테마색 같은 정보) 빠르고 지속 무한./ 쿠키는 민감 정보) 느리고 세션 만료 있지만 보안 있음
//java


//이전
필요 프로그램:intelji, jdk, mysql workbrench

//코테

시간초과 나면 이분탐색, dp
시간복잡도 같아도 vector가 더 빠를 수 있음 (vector > map > unordered_map)
재귀, dp는 기본적으로 설계한 점화식을 어떻게든 구현했다고 치고 박치기

// 살거
 커피,

// 규칙
// 프론트
html,css,js 역할 분담 명확히(하드 코딩 최소화(이미지 등 예외처리등에만 스타일 국소 적용)
모듈화(중복되는 js 함수, html 코드 따로 분리 후 import, css 주기적으로 정리, html 재사용)
재귀함수 아닌 이상 함수모듈화 아무리 해도 자원소모 거의 없음
html에서 기본 로딩(네비게이션바, 스크롤 버튼 등)은 <div id="load-basic>
목차는 index-n 내용은 content-n으로 id 설정(스크롤 및 폴드용)

백엔드
컨트롤러, dto, entity, repository, service로 역할 분담(간단한 것도 일괄 분리)
모듈화(service에 크롤링 등 함수 저장)
repository로 db 조회하는건 리소스가 크므로 반복문으로 조회하지 않고 전부 하나의 리스트로
합치고 한번에 조회

설계디자인 태그는 A+보다 A의 우선순위가 높은 관계 일단 id 순으로 정렬했으나 후처리
내 프로젝트에서 가장 중요한건 테이블 간의 연결성:
   논문에 성분, 효과가 티어와 함께 매핑(티어는 논문 연구 설계 가중치, 표본 개수, 기간 등으로 점수계산 및 알파벳 등급 변환)
-> 해당 성분에 논문 효과들 전부 삽입
-> 성분-효과 매핑 테이블엔 기존 티어(int 점수)들의 총합과 티어의 개수가 저장
-> 공식에 따라 성분별 종합 티어 자동 계산(메타분석 긍정, 코호트 부정일 경우 메타분석 우선하는식으로 가중치 부여)
테이블끼리 긴밀하게 영향을 주는 것이 다른 crud 게시판과의 가장 큰 차이점

점수 계산 공식을 코드로 고정할지, DB에 식별자로 저장해서 유동적으로 바꿀 수 있게 할지

종합 티어를 계산할 때 쿼리 수준에서 처리할지, 아니면 정기적 배치 연산으로 반영할지

논문-성분-효과 3자 관계를 단일 매핑 테이블로 만들지, journal_effect, supplement_effect, journal_supplement_effect 같이 분리할지

중복제거는 HashSet으로
//
슬슬 대화가 길어져서 로딩이 오래 걸리는데 다음 gpt를 위한 프롬포트를 써서 이 대화 내용을 이어나갈 수 있게 해줘. 정리된 전체적인 프로젝트 개요와 구조를 다음 GPT에게도 이해될 수 있도록 설명해 그걸 내가 복사해서 붙여넣을테니

